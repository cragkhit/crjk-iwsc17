package org.apache.catalina;
import java.net.URL;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.servlet.ServletContainerInitializer;
import javax.servlet.ServletContext;
import javax.servlet.ServletRegistration;
import javax.servlet.ServletRequest;
import javax.servlet.ServletSecurityElement;
import javax.servlet.descriptor.JspConfigDescriptor;
import org.apache.catalina.deploy.NamingResourcesImpl;
import org.apache.tomcat.ContextBind;
import org.apache.tomcat.InstanceManager;
import org.apache.tomcat.JarScanner;
import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
import org.apache.tomcat.util.descriptor.web.ErrorPage;
import org.apache.tomcat.util.descriptor.web.FilterDef;
import org.apache.tomcat.util.descriptor.web.FilterMap;
import org.apache.tomcat.util.descriptor.web.LoginConfig;
import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
import org.apache.tomcat.util.http.CookieProcessor;
public interface Context extends Container, ContextBind {
    public static final String ADD_WELCOME_FILE_EVENT = "addWelcomeFile";
    public static final String REMOVE_WELCOME_FILE_EVENT = "removeWelcomeFile";
    public static final String  CLEAR_WELCOME_FILES_EVENT = "clearWelcomeFiles";
    public static final String CHANGE_SESSION_ID_EVENT = "changeSessionId";
    public boolean getAllowCasualMultipartParsing();
    public void setAllowCasualMultipartParsing ( boolean allowCasualMultipartParsing );
    public Object[] getApplicationEventListeners();
    public void setApplicationEventListeners ( Object listeners[] );
    public Object[] getApplicationLifecycleListeners();
    public void setApplicationLifecycleListeners ( Object listeners[] );
    public String getCharset ( Locale locale );
    public URL getConfigFile();
    public void setConfigFile ( URL configFile );
    public boolean getConfigured();
    public void setConfigured ( boolean configured );
    public boolean getCookies();
    public void setCookies ( boolean cookies );
    public String getSessionCookieName();
    public void setSessionCookieName ( String sessionCookieName );
    public boolean getUseHttpOnly();
    public void setUseHttpOnly ( boolean useHttpOnly );
    public String getSessionCookieDomain();
    public void setSessionCookieDomain ( String sessionCookieDomain );
    public String getSessionCookiePath();
    public void setSessionCookiePath ( String sessionCookiePath );
    public boolean getSessionCookiePathUsesTrailingSlash();
    public void setSessionCookiePathUsesTrailingSlash (
        boolean sessionCookiePathUsesTrailingSlash );
    public boolean getCrossContext();
    public String getAltDDName();
    public void setAltDDName ( String altDDName ) ;
    public void setCrossContext ( boolean crossContext );
    public boolean getDenyUncoveredHttpMethods();
    public void setDenyUncoveredHttpMethods ( boolean denyUncoveredHttpMethods );
    public String getDisplayName();
    public void setDisplayName ( String displayName );
    public boolean getDistributable();
    public void setDistributable ( boolean distributable );
    public String getDocBase();
    public void setDocBase ( String docBase );
    public String getEncodedPath();
    public boolean getIgnoreAnnotations();
    public void setIgnoreAnnotations ( boolean ignoreAnnotations );
    public LoginConfig getLoginConfig();
    public void setLoginConfig ( LoginConfig config );
    public NamingResourcesImpl getNamingResources();
    public void setNamingResources ( NamingResourcesImpl namingResources );
    public String getPath();
    public void setPath ( String path );
    public String getPublicId();
    public void setPublicId ( String publicId );
    public boolean getReloadable();
    public void setReloadable ( boolean reloadable );
    public boolean getOverride();
    public void setOverride ( boolean override );
    public boolean getPrivileged();
    public void setPrivileged ( boolean privileged );
    public ServletContext getServletContext();
    public int getSessionTimeout();
    public void setSessionTimeout ( int timeout );
    public boolean getSwallowAbortedUploads();
    public void setSwallowAbortedUploads ( boolean swallowAbortedUploads );
    public boolean getSwallowOutput();
    public void setSwallowOutput ( boolean swallowOutput );
    public String getWrapperClass();
    public void setWrapperClass ( String wrapperClass );
    public boolean getXmlNamespaceAware();
    public void setXmlNamespaceAware ( boolean xmlNamespaceAware );
    public boolean getXmlValidation();
    public void setXmlValidation ( boolean xmlValidation );
    public boolean getXmlBlockExternal();
    public void setXmlBlockExternal ( boolean xmlBlockExternal );
    public boolean getTldValidation();
    public void setTldValidation ( boolean tldValidation );
    public JarScanner getJarScanner();
    public void setJarScanner ( JarScanner jarScanner );
    public Authenticator getAuthenticator();
    public void setLogEffectiveWebXml ( boolean logEffectiveWebXml );
    public boolean getLogEffectiveWebXml();
    public InstanceManager getInstanceManager();
    public void setInstanceManager ( InstanceManager instanceManager );
    public void setContainerSciFilter ( String containerSciFilter );
    public String getContainerSciFilter();
    public void addApplicationListener ( String listener );
    public void addApplicationParameter ( ApplicationParameter parameter );
    public void addConstraint ( SecurityConstraint constraint );
    public void addErrorPage ( ErrorPage errorPage );
    public void addFilterDef ( FilterDef filterDef );
    public void addFilterMap ( FilterMap filterMap );
    public void addFilterMapBefore ( FilterMap filterMap );
    public void addLocaleEncodingMappingParameter ( String locale, String encoding );
    public void addMimeMapping ( String extension, String mimeType );
    public void addParameter ( String name, String value );
    public void addRoleMapping ( String role, String link );
    public void addSecurityRole ( String role );
public default void addServletMappingDecoded ( String pattern, String name ) {
        addServletMappingDecoded ( pattern, name, false );
    }
    public void addServletMappingDecoded ( String pattern, String name,
                                           boolean jspWildcard );
    public void addWatchedResource ( String name );
    public void addWelcomeFile ( String name );
    public void addWrapperLifecycle ( String listener );
    public void addWrapperListener ( String listener );
    public Wrapper createWrapper();
    public String[] findApplicationListeners();
    public ApplicationParameter[] findApplicationParameters();
    public SecurityConstraint[] findConstraints();
    public ErrorPage findErrorPage ( int errorCode );
    public ErrorPage findErrorPage ( String exceptionType );
    public ErrorPage[] findErrorPages();
    public FilterDef findFilterDef ( String filterName );
    public FilterDef[] findFilterDefs();
    public FilterMap[] findFilterMaps();
    public String findMimeMapping ( String extension );
    public String[] findMimeMappings();
    public String findParameter ( String name );
    public String[] findParameters();
    public String findRoleMapping ( String role );
    public boolean findSecurityRole ( String role );
    public String[] findSecurityRoles();
    public String findServletMapping ( String pattern );
    public String[] findServletMappings();
    public String findStatusPage ( int status );
    public int[] findStatusPages();
    public ThreadBindingListener getThreadBindingListener();
    public void setThreadBindingListener ( ThreadBindingListener threadBindingListener );
    public String[] findWatchedResources();
    public boolean findWelcomeFile ( String name );
    public String[] findWelcomeFiles();
    public String[] findWrapperLifecycles();
    public String[] findWrapperListeners();
    public boolean fireRequestInitEvent ( ServletRequest request );
    public boolean fireRequestDestroyEvent ( ServletRequest request );
    public void reload();
    public void removeApplicationListener ( String listener );
    public void removeApplicationParameter ( String name );
    public void removeConstraint ( SecurityConstraint constraint );
    public void removeErrorPage ( ErrorPage errorPage );
    public void removeFilterDef ( FilterDef filterDef );
    public void removeFilterMap ( FilterMap filterMap );
    public void removeMimeMapping ( String extension );
    public void removeParameter ( String name );
    public void removeRoleMapping ( String role );
    public void removeSecurityRole ( String role );
    public void removeServletMapping ( String pattern );
    public void removeWatchedResource ( String name );
    public void removeWelcomeFile ( String name );
    public void removeWrapperLifecycle ( String listener );
    public void removeWrapperListener ( String listener );
    public String getRealPath ( String path );
    public int getEffectiveMajorVersion();
    public void setEffectiveMajorVersion ( int major );
    public int getEffectiveMinorVersion();
    public void setEffectiveMinorVersion ( int minor );
    public JspConfigDescriptor getJspConfigDescriptor();
    public void setJspConfigDescriptor ( JspConfigDescriptor descriptor );
    public void addServletContainerInitializer (
        ServletContainerInitializer sci, Set<Class<?>> classes );
    public boolean getPaused();
    boolean isServlet22();
    Set<String> addServletSecurity ( ServletRegistration.Dynamic registration,
                                     ServletSecurityElement servletSecurityElement );
    public void setResourceOnlyServlets ( String resourceOnlyServlets );
    public String getResourceOnlyServlets();
    public boolean isResourceOnlyServlet ( String servletName );
    public String getBaseName();
    public void setWebappVersion ( String webappVersion );
    public String getWebappVersion();
    public void setFireRequestListenersOnForwards ( boolean enable );
    public boolean getFireRequestListenersOnForwards();
    public void setPreemptiveAuthentication ( boolean enable );
    public boolean getPreemptiveAuthentication();
    public void setSendRedirectBody ( boolean enable );
    public boolean getSendRedirectBody();
    public Loader getLoader();
    public void setLoader ( Loader loader );
    public WebResourceRoot getResources();
    public void setResources ( WebResourceRoot resources );
    public Manager getManager();
    public void setManager ( Manager manager );
    public void setAddWebinfClassesResources ( boolean addWebinfClassesResources );
    public boolean getAddWebinfClassesResources();
    public void addPostConstructMethod ( String clazz, String method );
    public void addPreDestroyMethod ( String clazz, String method );
    public void removePostConstructMethod ( String clazz );
    public void removePreDestroyMethod ( String clazz );
    public String findPostConstructMethod ( String clazz );
    public String findPreDestroyMethod ( String clazz );
    public Map<String, String> findPostConstructMethods();
    public Map<String, String> findPreDestroyMethods();
    public Object getNamingToken();
    public void setCookieProcessor ( CookieProcessor cookieProcessor );
    public CookieProcessor getCookieProcessor();
    public void setValidateClientProvidedNewSessionId ( boolean validateClientProvidedNewSessionId );
    public boolean getValidateClientProvidedNewSessionId();
    public void setMapperContextRootRedirectEnabled ( boolean mapperContextRootRedirectEnabled );
    public boolean getMapperContextRootRedirectEnabled();
    public void setMapperDirectoryRedirectEnabled ( boolean mapperDirectoryRedirectEnabled );
    public boolean getMapperDirectoryRedirectEnabled();
    public void setUseRelativeRedirects ( boolean useRelativeRedirects );
    public boolean getUseRelativeRedirects();
    public void setDispatchersUseEncodedPaths ( boolean dispatchersUseEncodedPaths );
    public boolean getDispatchersUseEncodedPaths();
}
